// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ymgyt/cloudops/core (interfaces: Backend)

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	core "github.com/ymgyt/cloudops/core"
)

// MockBackend is a mock of Backend interface
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockBackend) Fetch(arg0 *core.FetchInput) (*core.FetchOutput, error) {
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(*core.FetchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBackendMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBackend)(nil).Fetch), arg0)
}

// Put mocks base method
func (m *MockBackend) Put(arg0 *core.PutInput) (*core.PutOutput, error) {
	ret := m.ctrl.Call(m, "Put", arg0)
	ret0, _ := ret[0].(*core.PutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockBackendMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBackend)(nil).Put), arg0)
}

// Remove mocks base method
func (m *MockBackend) Remove(arg0 *core.RemoveInput) (*core.RemoveOutput, error) {
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(*core.RemoveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockBackendMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBackend)(nil).Remove), arg0)
}
